<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前言 on linux学习笔记</title>
    <link>https://eiuapp.github.io/linux-hugo/</link>
    <description>Recent content in 前言 on linux学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 08 Jan 2019 21:07:13 +0100</lastBuildDate>
    
	<atom:link href="https://eiuapp.github.io/linux-hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>docker break ufw&#39;s rules in ubuntu - env1</title>
      <link>https://eiuapp.github.io/linux-hugo/ubuntu/ubuntu-docker-break-ufw-rules-state-1.html</link>
      <pubDate>Sat, 29 Sep 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/linux-hugo/ubuntu/ubuntu-docker-break-ufw-rules-state-1.html</guid>
      <description>docker break ufw&amp;rsquo;s rules in ubuntu - env1
env 当运行docker后
sudo docker run --detach \ --restart always \ --hostname 192.168.168.137 \ --publish 192.168.168.137:12443:443 --publish 192.168.168.137:80:80 --publish 192.168.168.137:22:22 \ --name gitlab-ce-11.9.1-2 \ --volume /srv/gitlab9.1/config:/etc/gitlab \ --volume /srv/gitlab9.1/logs:/var/log/gitlab \ --volume /srv/gitlab9.1/data:/var/opt/gitlab \ gitlab/gitlab-ce:11.9.1-ce.0  也会导致 整个局域网能访问到 80
sudo docker run --detach \ --restart always \ --hostname 192.168.168.137 \ --publish 127.0.0.1:12443:443 --publish 127.0.0.1:80:80 --publish 127.0.0.1:22:22 \ --name gitlab-ce-11.9.1-2 \ --volume /srv/gitlab9.1/config:/etc/gitlab \ --volume /srv/gitlab9.</description>
    </item>
    
    <item>
      <title>docker break ufw&#39;s rules in ubuntu - env2</title>
      <link>https://eiuapp.github.io/linux-hugo/ubuntu/ubuntu-docker-break-ufw-rules-state-2.html</link>
      <pubDate>Sat, 29 Sep 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/linux-hugo/ubuntu/ubuntu-docker-break-ufw-rules-state-2.html</guid>
      <description>docker break ufw&amp;rsquo;s rules in ubuntu - env2
ufw 阻止了从docker容器到外部的网络连接
对我来说这是一个非常标准的设置，我有一台运行docker和ufw的ubuntu机器作为我的防火墙。 如果启用防火墙，则docker实例无法连接到外部
https://blog.36web.rocks/2016/07/08/docker-behind-ufw.html https://oomake.com/question/4955599
env 当运行docker后
docker 配置 ubuntu@utuntu:~/lcnx/local/lvchuang-server$ sudo cat /etc/docker/daemon.json { &amp;quot;hosts&amp;quot;: [&amp;quot;tcp://0.0.0.0:2376&amp;quot;,&amp;quot;unix:///var/run/docker.sock&amp;quot;], &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://0d6wdn2y.mirror.aliyuncs.com&amp;quot;], &amp;quot;dns&amp;quot; : [&amp;quot;192.168.168.222&amp;quot;] } ubuntu@utuntu:~/lcnx/local/lvchuang-server$ sudo cat /etc/default/docker # Docker Upstart and SysVinit configuration file # # THIS FILE DOES NOT APPLY TO SYSTEMD # # Please see the documentation for &amp;quot;systemd drop-ins&amp;quot;: # https://docs.docker.com/engine/admin/systemd/ # # Customize location of Docker binary (especially for development testing).</description>
    </item>
    
    <item>
      <title>ubuntu</title>
      <link>https://eiuapp.github.io/linux-hugo/ubuntu/</link>
      <pubDate>Thu, 20 Sep 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/linux-hugo/ubuntu/</guid>
      <description>linux ubuntu</description>
    </item>
    
    <item>
      <title>ssh</title>
      <link>https://eiuapp.github.io/linux-hugo/ssh/</link>
      <pubDate>Sat, 29 Sep 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/linux-hugo/ssh/</guid>
      <description>linux ssh</description>
    </item>
    
    <item>
      <title>SSH远程命令找不到环境变量</title>
      <link>https://eiuapp.github.io/linux-hugo/ssh/ssh-command-env-not-found-command.html</link>
      <pubDate>Sat, 29 Sep 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/linux-hugo/ssh/ssh-command-env-not-found-command.html</guid>
      <description>解决SSH远程执行命令找不到环境变量的问题
env  ssh  原理 https://blog.csdn.net/whitehack/article/details/51705889 (这个写得最好) https://www.jianshu.com/p/77ebeb27a2dc (简单) https://www.cnblogs.com/zhenyuyaodidiao/p/9287497.html
实践 在 ssh 服务端 找到 # If not running interactively, don&#39;t do anything , (在这一行下面,一般会有一句return之类的), 在这一行下面, 加入我们需要的环境变量. 但是, 也不能加多了, 加多了, scp 会失效.
如下面,就是加多了, 如果报错, 则导致 远程scp不了文件.
$ vi /home/lcnx/.bashrc # If not running interactively, don&#39;t do anything export NVM_DIR=&amp;quot;$HOME/.nvm&amp;quot; [ -s &amp;quot;$NVM_DIR/nvm.sh&amp;quot; ] &amp;amp;&amp;amp; \. &amp;quot;$NVM_DIR/nvm.sh&amp;quot; # This loads nvm [ -s &amp;quot;$NVM_DIR/bash_completion&amp;quot; ] &amp;amp;&amp;amp; \. &amp;quot;$NVM_DIR/bash_completion&amp;quot; # This loads nvm bash_completion nvm use v11.</description>
    </item>
    
    <item>
      <title>tar</title>
      <link>https://eiuapp.github.io/linux-hugo/tar/</link>
      <pubDate>Tue, 28 Aug 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/linux-hugo/tar/</guid>
      <description>linux tar</description>
    </item>
    
    <item>
      <title>linux tar: z: unknown function modifie 错误</title>
      <link>https://eiuapp.github.io/linux-hugo/tar/linux-tar-z-unknown-function-modifie.html</link>
      <pubDate>Sat, 29 Sep 2018 20:00:00 +0800</pubDate>
      
      <guid>https://eiuapp.github.io/linux-hugo/tar/linux-tar-z-unknown-function-modifie.html</guid>
      <description>linux tar: z: unknown function modifie 错误
转载 https://blog.csdn.net/syc001/article/details/72841916
某些linux版本的机器上使用 tar -zxvf *.tar.gz 命令解压.tar.gz时会出现
tar: z: unknown function modifier
错误。
而使用 tar -x *.tar.gz 会出现“tar: /dev/rmt/0: No such file or directory”错误。
这是因为该linux下的tar不支持z参数造成的。在这种情况下，可以把解压过程分为两步：
gzip -d yourfile.tar.gz。生成一个.tar文件。
tar -xvf yourfile.tar。解压文件。</description>
    </item>
    
  </channel>
</rss>